{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACI,sBAAMC,SARW,SAAEC,GACnBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACvCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCLnBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAERC,EAFQ,gDAEuCC,UAAWH,GAFlD,+DAGKI,MAAOF,GAHZ,cAGRG,EAHQ,gBAIOA,EAAKC,OAJZ,uBAIPC,EAJO,EAIPA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT5B,kBAYPM,GAZO,4CAAH,sDCANO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAQV,EAAU,EAAVA,IAEvC,OADAc,QAAQC,IAAKN,EAAIC,EAAOV,GAEpB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCFJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAXAC,qBAAW,WACP1B,EAAQC,GACP0B,MAAM,SAAAhB,GACHiB,YAAY,WACRH,EAAS,CACLjB,KAAMG,EACNY,SAAS,MAEd,UAET,CAAEtB,IACGuB,EDfyBK,CAAc5B,GAAjCa,EAFwB,EAE7BN,KAAae,EAFgB,EAEhBA,QAGrB,OAFAN,QAAQC,IAAIK,GAGR,qCACA,mCAAOtB,KACLsB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEQL,EAAOJ,KAAK,SAACC,GACT,OAAO,cAAC,EAAD,eAEHA,GADEA,EAAIC,aEdjBkB,EAAe,WAAO,IAAD,EAGM3C,mBAAS,CAAE,cAHjB,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAU9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,+CAEI6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,U,MClB9B+B,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.70220f33.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [ inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGif = async ( category ) => {\n\n        const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=ib73KohLEVLEfTafAnt7TqIjjgTzRmQT`;\n        const resp = await fetch( url );\n        const {data} = await resp.json();\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        });\n        return gifs;\n    }\n","import React from 'react'\n\nexport const GifGridItem = ( { id, title , url} ) => {\n    console.log( id, title, url );\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    \n    const { data:images, loading} = useFetchGifs( category );\n    console.log(loading);\n    \n    return (\n        <>\n        <h3> { category }</h3>\n        { loading && <p>Loading</p> }\n        <div className=\"card-grid\">\n            {\n                images.map( (img) => {\n                    return <GifGridItem \n                    key={ img.id }\n                    {...img}/>\n                })\n            }\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGif } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n    useEffect( ()=> {\n        getGif( category )\n        .then( img => {\n            setTimeout( () => {\n                setstate({\n                    data: img,\n                    loading: false\n                })\n            }, 2000)\n        } )\n    },[ category ]);\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    \n    const [categories, setCategories] = useState([ 'One Punch']);\n    \n    // const handleAdd = () => {\n    //     // setCategories( [...categories, 'Hunter x Hunter'] );\n    //     setCategories( cats => [...cats, 'Hunter X Hunter']); \n    // }\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories= { setCategories }/>\n            <hr/>\n            <button> Agregar </button>\n            {\n                categories.map( category => \n                    <GifGrid\n                        key= {category}\n                        category={ category }\n                    />\n                 )\n            }\n        </>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}